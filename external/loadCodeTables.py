import os
import argparse
from pathlib import Path

def parse_centre_def(path):
    """Парсит centre.def и возвращает словарь subCentre -> описание"""
    centres = {}
    with open(path, 'r') as f:
        for line in f:
            if '=' in line and 'subCentre' in line:
                parts = line.split('=')
                name = parts[0].strip().strip('"')
                sub = int(parts[1].split(';')[0].split('=')[1].strip())
                centres[sub] = name
    return centres

def generate_header(path, output_dir):
    """Генерирует .h-файл с таблицами"""
    code = f"""// AUTOGENERATED FILE. DO NOT EDIT.
#pragma once

#include <string>

typedef struct {{
    const char *name, *comment;
}}ParmTable;

"""
    for file in Path(path).iterdir():
        if file.suffix == '.table' and file.name.startswith('2.') and file.name != '2.table':
            name_parts = file.stem.split('.')
            if len(name_parts)==2:
                table_name = file.stem.split('.')[1]
            elif len(name_parts)==3:
                table_name = file.stem.split('.')[2]
            code += f"constexpr ParmTable ParmTable_{table_name.upper()}_TABLE[] = {{\n"
            
            with open(file, 'r') as f:
                f.readline()  # Пропускаем заголовок
                count = 0
                for line in f:
                    line = line.strip()
                    if not line:
                        continue
                    
                    # Разбиваем строку на 3 компонента: номер, название, описание
                    parts = line.split(maxsplit=2)  # maxsplit=2 для сохранения описания
                    if len(parts) < 3:
                        continue
                    
                    num, name, comment = parts
                    while int(num)>count and count<255:
                        code += f'    {{"Unknown", "Unknown"}},\n'
                        count+=1
                    count+=1
                    code += f'    {{"{name}", "{comment}"}},\n'
            
            code += "};\n\n"


    os.makedirs(output_dir, exist_ok=True)
    print(code)
    with open(f"{output_dir}/eccodes_tables.h", 'w') as f:
        f.write(code)

if __name__ == "__main__":
    parser = argparse.ArgumentParser()
    parser.add_argument('--src', required=True)
    parser.add_argument('--out', required=True)
    args = parser.parse_args()

    #centres = parse_centre_def(Path(args.src) / "localConcepts/ecmf/centre.def")
    generate_header(Path(args.src), args.out)
