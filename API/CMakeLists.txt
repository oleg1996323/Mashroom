cmake_minimum_required(VERSION 3.22)
project("Geoinformational format's API collection")
enable_testing()
include(GoogleTest)

add_library(GIAPI INTERFACE)

target_include_directories(GIAPI INTERFACE ${CMAKE_CURRENT_SOURCE_DIR} ${OsterLib_INCLUDE_DIRS})

file(GLOB_RECURSE COMMON_SOURCES_HEADERS ${CMAKE_CURRENT_SOURCE_DIR}/common/*.h)
file(GLOB_RECURSE COMMON_SOURCES ${CMAKE_CURRENT_SOURCE_DIR}/common/src/**.cpp)
add_library(common_h INTERFACE)
target_sources(common_h INTERFACE ${COMMON_SOURCES_HEADERS})
target_include_directories(common_h INTERFACE common ${OsterLib_INCLUDE_DIRS})
if(COMMON_SOURCES)
    add_library(common PUBLIC ${COMMON_SOURCES})
    target_link_libraries(common INTERFACE common_h)
    target_include_directories(common PUBLIC ${CMAKE_CURRENT_SOURCE_DIR}/common/include ${OsterLib_INCLUDE_DIRS})
    target_link_libraries(GIAPI INTERFACE common OsterLib::bytes)
else()
    target_link_libraries(GIAPI INTERFACE common_h OsterLib::bytes)
endif()

add_subdirectory(grib1)
set_property(TARGET grib1API APPEND PROPERTY INCLUDE_DIRECTORIES "${CMAKE_CURRENT_SOURCE_DIR}")
target_link_libraries(GIAPI INTERFACE gribAPI::v1)
target_compile_definitions(grib1API PUBLIC GRIB1API PRIVATE "API_TYPE=API::GRIB1")
get_target_property(grib1API_DIR GIAPI INCLUDE_DIRECTORIES)
